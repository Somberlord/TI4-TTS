--- Add/remove hyperlanes
-- @author Darrell
-- #include <~/TI4-TTS/TI4/Objects/HyperlanesBag>

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        local function copyTable(t)
            if t and type(t) == 'table' then
                local copy = {}
                for k, v in pairs(t) do
                    copy[k] = type(v) == 'table' and copyTable(v) or v
                end
                t = copy
            end
            return t
        end
        return function(parameters) return copyTable(helperObject.call(functionName, parameters)) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

function onLoad(saveState)
    self.addContextMenuItem('Add 8p hyperlanes', add8pHyperlanes)
    self.addContextMenuItem('Add 7p hyperlanes', add7pHyperlanes)
    self.addContextMenuItem('Add 5p hyperlanes', add5pHyperlanes)
    self.addContextMenuItem('Add 3p hyperlanes', add3pHyperlanes)
    self.addContextMenuItem('Add 2p heads up', add2pHeadsUp)
    --self.addContextMenuItem('Print current', extractSetup)
end

local function _genericAdd(tileAndTransforms)
    local guidToTransforms = {}
    for _, tileAndTransform in pairs(tileAndTransforms) do
        local system = assert(_systemHelper.systemFromTile(tileAndTransform.tile))
        local transforms = guidToTransforms[system.guid]
        if not transforms then
            transforms = {}
            guidToTransforms[system.guid] = transforms
        end
        table.insert(transforms, tileAndTransform)
    end

    local mapTool = false
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == 'TI4 Map Tool' then
            mapTool = object
            break
        end
    end

    for _, entry in ipairs(self.getObjects()) do
        local transforms = guidToTransforms[entry.guid]
        if transforms then
            for i, transform in ipairs(transforms) do
                local pos = {
                    x = assert(transform.position.x or transform.position[1]),
                    y = assert(transform.position.y or transform.position[2]),
                    z = assert(transform.position.z or transform.position[3]),
                }
                local rot = {
                    x = assert(transform.rotation.x or transform.rotation[1]),
                    y = assert(transform.rotation.y or transform.rotation[2]),
                    z = assert(transform.rotation.z or transform.rotation[3]),
                }
                if i == 1 then
                    self.takeObject({
                        guid              = entry.guid,
                        position          = pos,
                        rotation          = rot,
                        callback_function = function(object) object.setLock(true) end,
                        smooth            = true,
                    })
                elseif mapTool then
                    local system = _systemHelper.systemFromGuid(entry.guid)
                    mapTool.call('cloneSystem', {
                        system            = system,
                        position          = pos,
                        rotation          = rot,
                        lock              = true,
                    })
                end
            end
        end
    end
end

function add8pHyperlanes()
    _genericAdd({
        { tile = 87, position = {0,1.12,6.06}, rotation = {0,240,0} },
        { tile = 90, position = {5.25,1.12,3.03}, rotation = {0,0,180} },
        { tile = 88, position = {0,1.12,-6.07}, rotation = {0,300,0} },
        { tile = 89, position = {-5.25,1.12,-3.04}, rotation = {0,180,180} },
        { tile = 85, position = {15.75,1.12,-3.04}, rotation = {0,300,180} },
        { tile = 83, position = {-15.75,1.12,3.03}, rotation = {0,300,180} }
    })
end

function add7pHyperlanes()
    _genericAdd({
        { tile = 85, position = {0,1.12,6.06}, rotation = {0,0,180} },
        { tile = 84, position = {0,1.12,-6.07}, rotation = {0,0,180} },
        { tile = 90, position = {-5.25,1.12,-3.04}, rotation = {0,180,180} },
        { tile = 88, position = {5.25,1.12,15.15}, rotation = {0,0,180} },
        { tile = 86, position = {5.25,1.12,-15.16}, rotation = {0,0,180} },
        { tile = 83, position = {-15.75,1.12,3.03}, rotation = {0,300,180} }
    })
end

function add5pHyperlanes()
    _genericAdd({
        { tile = 88, position = {5.26,1.13,-9.08}, rotation = {0,180,0} },
        { tile = 87, position = {-5.24,1.13,-9.11}, rotation = {0,180,0} },
        { tile = 85, position = {0.02,1.13,-6.08}, rotation = {0,180,0} },
        { tile = 84, position = {-5.25,1.13,-15.16}, rotation = {0,0,0} },
        { tile = 86, position = {0,1.13,-18.19}, rotation = {0,180,0} },
        { tile = 83, position = {5.23,1.13,-15.18}, rotation = {0,180,0} }
    })
end

function add3pHyperlanes()
    _genericAdd({
        { tile = 88, position = {-5.28,1.12,9.06}, rotation = {0,0,0} },
        { tile = 88, position = {10.5,1.12,0}, rotation = {0,120,0} },
        { tile = 88, position = {-10.5,1.12,0}, rotation = {0,120,0} },
        { tile = 87, position = {5.22,1.12,9.09}, rotation = {0,0,0} },
        { tile = 87, position = {5.25,1.12,-9.1}, rotation = {0,120,0} },
        { tile = 87, position = {-5.25,1.12,-9.1}, rotation = {0,0,0} },
        { tile = 85, position = {0,1.12,6.07}, rotation = {0,0,0} },
        { tile = 85, position = {5.25,1.12,-3.04}, rotation = {0,120,0} },
        { tile = 85, position = {-5.25,1.12,-3.04}, rotation = {0,240,0} },
        { tile = 84, position = {5.25,1.12,15.15}, rotation = {0,0,0} },
        { tile = 84, position = {10.5,1.12,-12.13}, rotation = {0,120,0} },
        { tile = 84, position = {-10.5,1.12,-12.13}, rotation = {0,0,0} },
        { tile = 86, position = {0,1.12,18.17}, rotation = {0,0,0} },
        { tile = 86, position = {15.75,1.12,-9.1}, rotation = {0,120,0} },
        { tile = 86, position = {-15.75,1.12,-9.1}, rotation = {0,240,0} },
        { tile = 83, position = {-5.26,1.12,15.17}, rotation = {0,180,0} },
        { tile = 83, position = {15.75,1.12,-3.04}, rotation = {0,300,0} },
        { tile = 83, position = {-15.75,1.12,-3.04}, rotation = {0,300,0} }
    })
end

function add2pHeadsUp()
    _genericAdd({
        { tile = 1015, position = {-15.76,1.13,9.09}, rotation = {0,0,0} },
        { tile = 1016, position = {-10.5,1.13,12.11}, rotation = {0,180,0} },
        { tile = 1012, position = {15.74,1.13,9.09}, rotation = {0,120,0} },
        { tile = 1018, position = {10.5,1.13,12.11}, rotation = {0,240,0} },
        { tile = 85, position = {15.74,1.13,-9.1}, rotation = {0,120,0} },
        { tile = 84, position = {10.5,1.13,-12.12}, rotation = {0,300,0} },
        { tile = 86, position = {-15.76,1.13,-9.09}, rotation = {0,240,0} },
        { tile = 83, position = {-10.5,1.13,-12.12}, rotation = {0,240,0} }
    })
end

-- Use "chat_copy" from the console to extract.
function extractSetup(playerColor)
    local systems = _systemHelper.systems()

    local hyperlanes = {}
    for _, object in ipairs(getAllObjects()) do
        local system = systems[object.getGUID()]
        if system and system.hyperlane then
            table.insert(hyperlanes, object)
        end
    end

    local function cleanValue(value, roundTo)
        if roundTo then
            value = math.floor((value + (roundTo / 2)) / roundTo) * roundTo
        end
        local rounded = math.floor(value + 0.5)
        if math.abs(value - rounded) <= 0.02 then
            return rounded
        else
            return math.floor(value * 100) / 100
        end
    end
    local function cleanPos(xyz)
        return {
            cleanValue(xyz.x),
            cleanValue(xyz.y),
            cleanValue(xyz.z),
        }
    end
    local function cleanRot(xyz)
        return {
            cleanValue(xyz.x, 30) % 360,
            cleanValue(xyz.y, 30) % 360,
            cleanValue(xyz.z, 30) % 360,
        }
    end

    local result = {}
    for _, hyperlane in ipairs(hyperlanes) do
        local system = assert(systems[hyperlane.getGUID()])
        local tile = assert(system.tile)
        local pos = cleanPos(hyperlane.getPosition())
        local rot = cleanRot(hyperlane.getRotation())
        table.insert(result, table.concat({
            '{ ',
            'tile = ' .. tile,
            ', ',
            'position = {' .. pos[1] .. ',' .. pos[2] .. ',' .. pos[3] .. '}',
            ', ',
            'rotation = {' .. rot[1] .. ',' .. rot[2] .. ',' .. rot[3] .. '}',
            ' }',
        }, ''))
    end

    local result = table.concat(result, ',\n')
    printToAll('Dumping hyperlanes as an error message (easier to extract):', 'Red')
    error('\n' .. result)
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
