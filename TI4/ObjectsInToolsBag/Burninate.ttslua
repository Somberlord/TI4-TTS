--- Sustain damage burn effect
-- @author Darrell
-- #include <~/TI4-TTS/TI4/ObjectsInToolsBag/Burninate>

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _factionHelper = getHelperClient('TI4_FACTION_HELPER')

local _burnNameSet = {}
local _decalUrl = false
local _decalSize = 1

local _burningObjectGuidSet = {}
local _isBroken = false

-------------------------------------------------------------------------------

function onLoad(saveState)
    for _, color in ipairs(Player.getColors()) do
        _burnNameSet[color .. ' Mech'] = true
        _burnNameSet[color .. ' Carrier'] = true
        _burnNameSet[color .. ' Cruiser'] = true
        _burnNameSet[color .. ' Destroyer'] = true
        _burnNameSet[color .. ' Dreadnought'] = true
        _burnNameSet[color .. ' Flagship'] = true
        _burnNameSet[color .. ' PDS'] = true
        _burnNameSet[color .. ' War Sun'] = true
    end
    for color, faction in pairs(_factionHelper.allFactions(true)) do
        _burnNameSet[faction.flagship] = true
    end

    -- Use the bottom image as the decal.
    _decalUrl = assert(self.getCustomObject().image_bottom)

    for _, object in ipairs(getAllObjects()) do
        _maybeBurn(object)
    end
end

function onDestroy()
    for guid, _ in pairs(_burningObjectGuidSet) do
        local object = getObjectFromGUID(guid)
        if object and _burningObjectGuidSet[object.getGUID()] then
            _unburn(object)
        end
    end
end

function onObjectDestroy(object)
    if not _isBroken then
        _isBroken = true  -- when exiting TTS this getGUID call errors out
        if _burningObjectGuidSet[object.getGUID()] then
            _unburn(object)
        end
        _isBroken = false  -- didn't error out?  great, reset to healthy
    end
end

function onObjectEnterContainer(container, object)
    if _burningObjectGuidSet[object.getGUID()] then
        _unburn(object)
    end
end

-- function onObjectPickUp(playerColor, object)
--     assert(type(object) == 'userdata')
--     if _burningObjectGuidSet[object.getGUID()] then
--         _unburn(object)
--     end
-- end

function onObjectDrop(playerColor, object)
    assert(type(object) == 'userdata')
    if object.is_face_down then
        _maybeBurn(object)
    end
end

function onObjectRotate(object, spin, flip, player_color, old_spin, old_flip)
    assert(type(object) == 'userdata')
    if (flip ~= old_flip) then
        if flip > 90 and flip < 270 then
            _maybeBurn(object, flip)
        elseif _burningObjectGuidSet[object.getGUID()] then
            _unburn(object)
        end
    end
end

-------------------------------------------------------------------------------

function _maybeBurn(object, flipValue)
    if object.held_by_color then
        return false
    end
    if (object.tag ~= 'Generic') and (object.tag ~= 'Figurine') then
        return false
    end
    local z = flipValue or object.getRotation().z
    if (z < 90) or (z > 270) then
        return false
    end
    if not _burnNameSet[object.getName()] then
        return false
    end

    -- Decal placement is wrong while flip is in progress?
    local function delayed()
        _delayedStableBurn(object)
    end
    Wait.time(delayed, 0.1)
end

function _delayedStableBurn(object)
    local guid = object.getGUID()

    local function act()
        local object = getObjectFromGUID(guid)
        if not object then
            return false
        end
        _burn(object)
    end

    local function condition()
        local object = getObjectFromGUID(guid)
        if not object then
            return false
        end
        if object.spawning then
            return false
        end
        if not object.resting then
            return false
        end
        if object.isSmoothMoving() then
            return false
        end
        return true
    end
    local timeout = act
    Wait.condition(act, condition, 1, timeout)
end

function _burn(object)
    _burningObjectGuidSet[object.getGUID()] = object

    local bounds = object.getBoundsNormalized()
    local bounds = object.getBounds()
    local centerY = bounds.offset.y / object.getScale().y
    local bottomY = centerY - bounds.size.y / object.getScale().y / 2

    -- Models vary a good amount, do not attempt to center X/Z.
    local p = {
        x = 0,
        y = bottomY - 0.01,
        z = 0,
    }

    local w = _decalSize / object.getScale().x
    local h = _decalSize / object.getScale().z

    object.setDecals({
        {
            name     = 'sustained',
            url      = _decalUrl,
            position = p,
            rotation = { x = 270, y = 0, z = 0 }, -- facing down
            scale    = { x = w, y = h, z = 1 }, -- w, h in world units
        }
    })
end

function _unburn(object)
    _burningObjectGuidSet[object.getGUID()] = nil
    object.setDecals({})
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
