function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

function onSave()
    local json = JSON.encode(doSave())
    print(json)
    print('save ' .. string.len(json))
    return json
end

function doSave()
    local result = {}
    for _, system in pairs(_systemHelper.systems()) do
        local tile = assert(system.tile)
        if tile < 1000 then
            result[tostring(tile)] = saveSystem(system)
        end
    end
    return result
end

function saveSystem(system)
    local function cleanPosition(tbl)
        for k, v in pairs(tbl) do
            if type(v) == 'number' then
                v = math.floor(v * 1000) / 1000
                tbl[k] = v
            end
            tbl.y = nil
        end
        return tbl
    end
    local result = {}
    for _, planet in ipairs(system.planets or {}) do
        result.planets = result.planets or {}
        table.insert(result.planets, {
            planet = planet.name,
            resources = planet.resources or 0,
            influence = planet.influence or 0,
            trait = planet.trait,
            tech = planet.tech,
            legendary = planet.legendary,
            position = cleanPosition(planet.position),
            radius = planet.radius,
        })
    end
    for _, wormhole in ipairs(system.wormholes or {}) do
        result.wormholes = result.wormholes or {}
        table.insert(result.wormholes, wormhole)
    end
    for _, anomaly in ipairs(system.anomalies or {}) do
        assert(not result.anomaly) -- only one!
        result.anomaly = anomaly
    end
    return result
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
