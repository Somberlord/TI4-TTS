--- Reset system tiles to use ThatRobHuman's new mesh / UV map.
-- @author darrell

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

local _guidToSystem = false
local _deletePendingSet = {}

-------------------------------------------------------------------------------

function onLoad(save_state)
    _guidToSystem = _systemHelper.systems()
    self.addContextMenuItem('Get Tile Images', function() startLuaCoroutine(self, 'getTileImagesCoroutine') end)
end

function onObjectDestroy(dyingObject)
    _deletePendingSet[dyingObject.getGUID()] = nil
end

function safePutObject(bag, object)
    assert(type(bag) == 'userdata' and type(object) == 'userdata')
    assert(bag.tag == 'Bag' or bag.tag == 'Infinite')
    assert(not object.getLock(), object.getName() .. ' locked')
    local guid = object.getGUID()
    _deletePendingSet[guid] = true
    bag.putObject(object)
    while _deletePendingSet[guid] do
        coroutine.yield(0)
    end
    coroutine.yield(0)
    coroutine.yield(0)
    coroutine.yield(0)
end

function safeTakeObjectAndLock(bag, guid)
    assert(type(bag) == 'userdata' and ((not guid) or type(guid) == 'string'))
    local pos = bag.getPosition()
    local object = bag.takeObject({
        guid = guid,
        position = { x = pos.x, y = pos.y + 5, z = pos.z },
        smooth = false
    })
    while object.spawning do
        coroutine.yield(0)
    end
    object.setLock(true)
    coroutine.yield(0)
    coroutine.yield(0)
    coroutine.yield(0)
    return object
end

-------------------------------------------------------------------------------

function processTile(bag, tileGuid)
    assert(type(tileGuid) == 'string')

    local tile = false
    if bag then
        tile = safeTakeObjectAndLock(bag, tileGuid)
    else
        tile = getObjectFromGUID(tileGuid)
    end
    assert(tile)
    local system = assert(_guidToSystem[tileGuid])

    local json = JSON.decode(tile.getJSON())
    local url = assert(json.CustomMesh.DiffuseURL)
    local hyperlane = system.hyperlane or false

    print(system.tile .. ' ' .. tostring(hyperlane) .. ' ' .. url)
    local backSet = {
        [1] = 'HOME', -- home
        [20] = 'BLUE', -- blue
        [39] = 'RED' -- red
    }
    if hyperlane then
        local u1 = 'http://localhost:8080/clip?name=' .. system.tile .. 'a&img=' .. url
        local u2 = 'http://localhost:8080/clip?name=' .. system.tile .. 'b&back=1&img=' .. url
        WebRequest.get(u1)
        WebRequest.get(u2)
    else
        local u1 = 'http://localhost:8080/clip?name=' .. system.tile .. '&img=' .. url
        WebRequest.get(u1)
    end
    if backSet[system.tile] then
        local name = backSet[system.tile]
        local u1 = 'http://localhost:8080/clip?name=' .. name .. '&back=1&img=' .. url
        WebRequest.get(u1)
    end

    if bag then
        tile.setLock(false)
        safePutObject(bag, tile)
    end
end

-- Process one at a time, expect guid collisions due to copy/paste.
function processFactionBox(bag, boxGuid)
    assert(type(bag) == 'userdata' and type(boxGuid) == 'string')
    assert(bag.tag == 'Bag' or bag.tag == 'Infinite')
    local box = safeTakeObjectAndLock(bag, boxGuid)
    assert(box.tag == 'Bag', 'bad box tag ' .. box.tag)

    --print('FACTION ' .. bag.getName() .. ' -> ' .. box.getName())

    for _, entry in ipairs(box.getObjects()) do
        if _guidToSystem[entry.guid] then
            processTile(box, entry.guid)
            coroutine.yield(0)
        end
    end

    box.setLock(false)
    safePutObject(bag, box)
end

function getTileImagesCoroutine()

    -- Find top-level tiles.
    for _, object in ipairs(getAllObjects()) do
        if _guidToSystem[object.getGUID()] then
            processTile(false, object.getGUID())
            coroutine.yield(0)
        end
    end
    coroutine.yield(0)

    -- Find second-level tiles (Franken home systems bags on table).
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Bag' then
            for _, entry in ipairs(object.getObjects()) do
                if _guidToSystem[entry.guid] then
                    processTile(object, entry.guid)
                    coroutine.yield(0)
                end
            end
        end
    end
    coroutine.yield(0)

    -- Find faction boxes inside top-level containers.
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Bag' then
            for _, entry in ipairs(object.getObjects()) do
                local tokenName = string.match(entry.name, '^(.*) Box$')
                if tokenName and _factionHelper.fromTokenName(tokenName) then
                    processFactionBox(object, entry.guid)
                end
            end
        end
    end

    print('getTileImagesCoroutine FINISHED')
    return 1
end

-------------------------------------------------------------------------------
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
